// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: samba_admin.proto

package proto_samba_management

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SambaAllocationClient is the client API for SambaAllocation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SambaAllocationClient interface {
	AllocateSambaShare(ctx context.Context, in *RequestShambaShare, opts ...grpc.CallOption) (*SambaResponse, error)
	AddUserToShare(ctx context.Context, in *AddUser, opts ...grpc.CallOption) (*AddUserResponse, error)
	DeleteShare(ctx context.Context, in *DeleteShareRequest, opts ...grpc.CallOption) (*DeleteShareResponse, error)
	AlloateSpace(ctx context.Context, in *SpaceAllocationRequest, opts ...grpc.CallOption) (*SpaceallocationResponse, error)
	DeleteSpace(ctx context.Context, in *DeleteSpaceRequest, opts ...grpc.CallOption) (*DeleteSpaceResponse, error)
	AllocateSpaceConversation(ctx context.Context, opts ...grpc.CallOption) (SambaAllocation_AllocateSpaceConversationClient, error)
}

type sambaAllocationClient struct {
	cc grpc.ClientConnInterface
}

func NewSambaAllocationClient(cc grpc.ClientConnInterface) SambaAllocationClient {
	return &sambaAllocationClient{cc}
}

func (c *sambaAllocationClient) AllocateSambaShare(ctx context.Context, in *RequestShambaShare, opts ...grpc.CallOption) (*SambaResponse, error) {
	out := new(SambaResponse)
	err := c.cc.Invoke(ctx, "/SambaAllocation/AllocateSambaShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sambaAllocationClient) AddUserToShare(ctx context.Context, in *AddUser, opts ...grpc.CallOption) (*AddUserResponse, error) {
	out := new(AddUserResponse)
	err := c.cc.Invoke(ctx, "/SambaAllocation/AddUserToShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sambaAllocationClient) DeleteShare(ctx context.Context, in *DeleteShareRequest, opts ...grpc.CallOption) (*DeleteShareResponse, error) {
	out := new(DeleteShareResponse)
	err := c.cc.Invoke(ctx, "/SambaAllocation/DeleteShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sambaAllocationClient) AlloateSpace(ctx context.Context, in *SpaceAllocationRequest, opts ...grpc.CallOption) (*SpaceallocationResponse, error) {
	out := new(SpaceallocationResponse)
	err := c.cc.Invoke(ctx, "/SambaAllocation/AlloateSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sambaAllocationClient) DeleteSpace(ctx context.Context, in *DeleteSpaceRequest, opts ...grpc.CallOption) (*DeleteSpaceResponse, error) {
	out := new(DeleteSpaceResponse)
	err := c.cc.Invoke(ctx, "/SambaAllocation/DeleteSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sambaAllocationClient) AllocateSpaceConversation(ctx context.Context, opts ...grpc.CallOption) (SambaAllocation_AllocateSpaceConversationClient, error) {
	stream, err := c.cc.NewStream(ctx, &SambaAllocation_ServiceDesc.Streams[0], "/SambaAllocation/AllocateSpaceConversation", opts...)
	if err != nil {
		return nil, err
	}
	x := &sambaAllocationAllocateSpaceConversationClient{stream}
	return x, nil
}

type SambaAllocation_AllocateSpaceConversationClient interface {
	Send(*SpaceAllocationMessage) error
	Recv() (*SpaceAllocationMessage, error)
	grpc.ClientStream
}

type sambaAllocationAllocateSpaceConversationClient struct {
	grpc.ClientStream
}

func (x *sambaAllocationAllocateSpaceConversationClient) Send(m *SpaceAllocationMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sambaAllocationAllocateSpaceConversationClient) Recv() (*SpaceAllocationMessage, error) {
	m := new(SpaceAllocationMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SambaAllocationServer is the server API for SambaAllocation service.
// All implementations must embed UnimplementedSambaAllocationServer
// for forward compatibility
type SambaAllocationServer interface {
	AllocateSambaShare(context.Context, *RequestShambaShare) (*SambaResponse, error)
	AddUserToShare(context.Context, *AddUser) (*AddUserResponse, error)
	DeleteShare(context.Context, *DeleteShareRequest) (*DeleteShareResponse, error)
	AlloateSpace(context.Context, *SpaceAllocationRequest) (*SpaceallocationResponse, error)
	DeleteSpace(context.Context, *DeleteSpaceRequest) (*DeleteSpaceResponse, error)
	AllocateSpaceConversation(SambaAllocation_AllocateSpaceConversationServer) error
	mustEmbedUnimplementedSambaAllocationServer()
}

// UnimplementedSambaAllocationServer must be embedded to have forward compatible implementations.
type UnimplementedSambaAllocationServer struct {
}

func (UnimplementedSambaAllocationServer) AllocateSambaShare(context.Context, *RequestShambaShare) (*SambaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateSambaShare not implemented")
}
func (UnimplementedSambaAllocationServer) AddUserToShare(context.Context, *AddUser) (*AddUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserToShare not implemented")
}
func (UnimplementedSambaAllocationServer) DeleteShare(context.Context, *DeleteShareRequest) (*DeleteShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShare not implemented")
}
func (UnimplementedSambaAllocationServer) AlloateSpace(context.Context, *SpaceAllocationRequest) (*SpaceallocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlloateSpace not implemented")
}
func (UnimplementedSambaAllocationServer) DeleteSpace(context.Context, *DeleteSpaceRequest) (*DeleteSpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSpace not implemented")
}
func (UnimplementedSambaAllocationServer) AllocateSpaceConversation(SambaAllocation_AllocateSpaceConversationServer) error {
	return status.Errorf(codes.Unimplemented, "method AllocateSpaceConversation not implemented")
}
func (UnimplementedSambaAllocationServer) mustEmbedUnimplementedSambaAllocationServer() {}

// UnsafeSambaAllocationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SambaAllocationServer will
// result in compilation errors.
type UnsafeSambaAllocationServer interface {
	mustEmbedUnimplementedSambaAllocationServer()
}

func RegisterSambaAllocationServer(s grpc.ServiceRegistrar, srv SambaAllocationServer) {
	s.RegisterService(&SambaAllocation_ServiceDesc, srv)
}

func _SambaAllocation_AllocateSambaShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestShambaShare)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SambaAllocationServer).AllocateSambaShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SambaAllocation/AllocateSambaShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SambaAllocationServer).AllocateSambaShare(ctx, req.(*RequestShambaShare))
	}
	return interceptor(ctx, in, info, handler)
}

func _SambaAllocation_AddUserToShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SambaAllocationServer).AddUserToShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SambaAllocation/AddUserToShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SambaAllocationServer).AddUserToShare(ctx, req.(*AddUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _SambaAllocation_DeleteShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SambaAllocationServer).DeleteShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SambaAllocation/DeleteShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SambaAllocationServer).DeleteShare(ctx, req.(*DeleteShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SambaAllocation_AlloateSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpaceAllocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SambaAllocationServer).AlloateSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SambaAllocation/AlloateSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SambaAllocationServer).AlloateSpace(ctx, req.(*SpaceAllocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SambaAllocation_DeleteSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SambaAllocationServer).DeleteSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SambaAllocation/DeleteSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SambaAllocationServer).DeleteSpace(ctx, req.(*DeleteSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SambaAllocation_AllocateSpaceConversation_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SambaAllocationServer).AllocateSpaceConversation(&sambaAllocationAllocateSpaceConversationServer{stream})
}

type SambaAllocation_AllocateSpaceConversationServer interface {
	Send(*SpaceAllocationMessage) error
	Recv() (*SpaceAllocationMessage, error)
	grpc.ServerStream
}

type sambaAllocationAllocateSpaceConversationServer struct {
	grpc.ServerStream
}

func (x *sambaAllocationAllocateSpaceConversationServer) Send(m *SpaceAllocationMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sambaAllocationAllocateSpaceConversationServer) Recv() (*SpaceAllocationMessage, error) {
	m := new(SpaceAllocationMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SambaAllocation_ServiceDesc is the grpc.ServiceDesc for SambaAllocation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SambaAllocation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SambaAllocation",
	HandlerType: (*SambaAllocationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllocateSambaShare",
			Handler:    _SambaAllocation_AllocateSambaShare_Handler,
		},
		{
			MethodName: "AddUserToShare",
			Handler:    _SambaAllocation_AddUserToShare_Handler,
		},
		{
			MethodName: "DeleteShare",
			Handler:    _SambaAllocation_DeleteShare_Handler,
		},
		{
			MethodName: "AlloateSpace",
			Handler:    _SambaAllocation_AlloateSpace_Handler,
		},
		{
			MethodName: "DeleteSpace",
			Handler:    _SambaAllocation_DeleteSpace_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AllocateSpaceConversation",
			Handler:       _SambaAllocation_AllocateSpaceConversation_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "samba_admin.proto",
}

// DiskAllocationClient is the client API for DiskAllocation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiskAllocationClient interface {
	AddDiskToServer(ctx context.Context, in *PartitionAllocRequest, opts ...grpc.CallOption) (*PartitionAllocResponse, error)
}

type diskAllocationClient struct {
	cc grpc.ClientConnInterface
}

func NewDiskAllocationClient(cc grpc.ClientConnInterface) DiskAllocationClient {
	return &diskAllocationClient{cc}
}

func (c *diskAllocationClient) AddDiskToServer(ctx context.Context, in *PartitionAllocRequest, opts ...grpc.CallOption) (*PartitionAllocResponse, error) {
	out := new(PartitionAllocResponse)
	err := c.cc.Invoke(ctx, "/DiskAllocation/AddDiskToServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiskAllocationServer is the server API for DiskAllocation service.
// All implementations must embed UnimplementedDiskAllocationServer
// for forward compatibility
type DiskAllocationServer interface {
	AddDiskToServer(context.Context, *PartitionAllocRequest) (*PartitionAllocResponse, error)
	mustEmbedUnimplementedDiskAllocationServer()
}

// UnimplementedDiskAllocationServer must be embedded to have forward compatible implementations.
type UnimplementedDiskAllocationServer struct {
}

func (UnimplementedDiskAllocationServer) AddDiskToServer(context.Context, *PartitionAllocRequest) (*PartitionAllocResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDiskToServer not implemented")
}
func (UnimplementedDiskAllocationServer) mustEmbedUnimplementedDiskAllocationServer() {}

// UnsafeDiskAllocationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiskAllocationServer will
// result in compilation errors.
type UnsafeDiskAllocationServer interface {
	mustEmbedUnimplementedDiskAllocationServer()
}

func RegisterDiskAllocationServer(s grpc.ServiceRegistrar, srv DiskAllocationServer) {
	s.RegisterService(&DiskAllocation_ServiceDesc, srv)
}

func _DiskAllocation_AddDiskToServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartitionAllocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskAllocationServer).AddDiskToServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DiskAllocation/AddDiskToServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiskAllocationServer).AddDiskToServer(ctx, req.(*PartitionAllocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DiskAllocation_ServiceDesc is the grpc.ServiceDesc for DiskAllocation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DiskAllocation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DiskAllocation",
	HandlerType: (*DiskAllocationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDiskToServer",
			Handler:    _DiskAllocation_AddDiskToServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "samba_admin.proto",
}

// SpaceAllocationClient is the client API for SpaceAllocation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpaceAllocationClient interface {
	AlloateSpace(ctx context.Context, in *SpaceAllocationRequest, opts ...grpc.CallOption) (*SpaceallocationResponse, error)
	DeleteSpace(ctx context.Context, in *DeleteSpaceRequest, opts ...grpc.CallOption) (*DeleteSpaceResponse, error)
}

type spaceAllocationClient struct {
	cc grpc.ClientConnInterface
}

func NewSpaceAllocationClient(cc grpc.ClientConnInterface) SpaceAllocationClient {
	return &spaceAllocationClient{cc}
}

func (c *spaceAllocationClient) AlloateSpace(ctx context.Context, in *SpaceAllocationRequest, opts ...grpc.CallOption) (*SpaceallocationResponse, error) {
	out := new(SpaceallocationResponse)
	err := c.cc.Invoke(ctx, "/SpaceAllocation/AlloateSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceAllocationClient) DeleteSpace(ctx context.Context, in *DeleteSpaceRequest, opts ...grpc.CallOption) (*DeleteSpaceResponse, error) {
	out := new(DeleteSpaceResponse)
	err := c.cc.Invoke(ctx, "/SpaceAllocation/DeleteSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpaceAllocationServer is the server API for SpaceAllocation service.
// All implementations must embed UnimplementedSpaceAllocationServer
// for forward compatibility
type SpaceAllocationServer interface {
	AlloateSpace(context.Context, *SpaceAllocationRequest) (*SpaceallocationResponse, error)
	DeleteSpace(context.Context, *DeleteSpaceRequest) (*DeleteSpaceResponse, error)
	mustEmbedUnimplementedSpaceAllocationServer()
}

// UnimplementedSpaceAllocationServer must be embedded to have forward compatible implementations.
type UnimplementedSpaceAllocationServer struct {
}

func (UnimplementedSpaceAllocationServer) AlloateSpace(context.Context, *SpaceAllocationRequest) (*SpaceallocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlloateSpace not implemented")
}
func (UnimplementedSpaceAllocationServer) DeleteSpace(context.Context, *DeleteSpaceRequest) (*DeleteSpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSpace not implemented")
}
func (UnimplementedSpaceAllocationServer) mustEmbedUnimplementedSpaceAllocationServer() {}

// UnsafeSpaceAllocationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpaceAllocationServer will
// result in compilation errors.
type UnsafeSpaceAllocationServer interface {
	mustEmbedUnimplementedSpaceAllocationServer()
}

func RegisterSpaceAllocationServer(s grpc.ServiceRegistrar, srv SpaceAllocationServer) {
	s.RegisterService(&SpaceAllocation_ServiceDesc, srv)
}

func _SpaceAllocation_AlloateSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpaceAllocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceAllocationServer).AlloateSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SpaceAllocation/AlloateSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceAllocationServer).AlloateSpace(ctx, req.(*SpaceAllocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceAllocation_DeleteSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceAllocationServer).DeleteSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SpaceAllocation/DeleteSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceAllocationServer).DeleteSpace(ctx, req.(*DeleteSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SpaceAllocation_ServiceDesc is the grpc.ServiceDesc for SpaceAllocation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpaceAllocation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SpaceAllocation",
	HandlerType: (*SpaceAllocationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AlloateSpace",
			Handler:    _SpaceAllocation_AlloateSpace_Handler,
		},
		{
			MethodName: "DeleteSpace",
			Handler:    _SpaceAllocation_DeleteSpace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "samba_admin.proto",
}
