syntax = "proto3";

option go_package = "github.com/PranoSA/samba_share_backend/proto_samba_management";

message RequestShambaShare {
    string owner = 1;
    string spaceid = 2;
}

message SambaResponse {
    int32 status = 1;
    string fsid  = 2;
    string ip = 3;
}


message AddUser{
    string user = 1;
    string share_id = 2;
    string password = 3;
}

message AddUserResponse {
    string user = 1;
    int32 status = 2;
}



/*

    SambaAllocation Service is to 
    1) Add Samba Allocations To An Already Allocated Space
    2) Manage Adding Users to the Samba Allocation Server

    This is to be used by the web_client to call the samba_server

*/

message DeleteShareRequest {
    string owner = 1;
    string shareid = 2;
}

message DeleteShareResponse {
    string owner = 1;
    string shareid = 2;
    int32 status = 3;
}

message SpaceAllocationMessage {
    int32 sequence = 1;
    string owner = 2;
    int64 size = 3;
    string spaceid = 4;
    string tid = 5;
}

message SpaceAllocationMessageResponse {
    int32 sequence = 1;
    string owner = 2;
    int64 size = 3;
    string spaceid = 4; 
}

/**
    Translate The Communication Between Web Server and Samba Server TO THis Service
*/

service SambaAllocation {
    rpc AllocateSambaShare(RequestShambaShare) returns (SambaResponse){}
    rpc AddUserToShare(AddUser) returns (AddUserResponse){}
    rpc DeleteShare(DeleteShareRequest) returns (DeleteShareResponse) {}
    rpc AlloateSpace(SpaceAllocationRequest) returns (SpaceallocationResponse){}
    rpc DeleteSpace(DeleteSpaceRequest) returns (DeleteSpaceResponse){}
    rpc AllocateSpaceConversation(stream SpaceAllocationMessage) returns(stream SpaceAllocationMessage){}
}

message PartitionAllocRequest {
    string Device = 1;
    string Mount_path = 2;
    string fsid = 4;
    int64 alloc_size = 3;

}

message PartitionAllocResponse {
    int32 status_code = 1;
    string status_message = 2;
}

/*
    Disk Allocation Service is Used If You want to ensure consistency When Contacting the Samba_Server

    You Use This To Mount a Device with a Predefined Device and Mount Path, and the file system will ensure that the device
    is indeed mounted at that mount path.

    Otherwise, the Samba Server Will Automatically Assume its Mounted at 
    /mount/samba_server/fs_id 
    And Will Fail In Respone to GRPC calls from the Web Server When Started
    If this information is incorrect (device -> mount mapping )
    with detailed logs

*/

service DiskAllocation {
    rpc AddDiskToServer(PartitionAllocRequest) returns (PartitionAllocResponse) {}
}




message SpaceAllocationRequest {
    string owner  = 1;
    int64 size = 2;
    string spaceid = 3; 
}


message SpaceallocationResponse {
    string spaceid = 1;
    int32 status_code = 2;
    int64 size = 3;
    string fsid = 4;
}

/*
    SpaceAllocation Service Is Used Between The Web Server and Samba Server 

    If You Want To ALlocate a SPace, It will be randomly assigned to a FSID and mounted at 
    mount_path({file_system})/{spaceid} 

    It Will Be Granted The Owner and The Size Will Be Requested in # of Megabytes 

    Then a Linux Group called spaceid will be created, where all users
    (spaceid+user), (spaceid+email) will be added to the linux group
    with a quota for the size

    Allocate Space ->
    Delete Space -> 

*/

message DeleteSpaceRequest  {
    string spaceid = 1;
}

message DeleteSpaceResponse {
    string spaceid = 1;
    string status_code = 2;
}

service SpaceAllocation {
    rpc AlloateSpace(SpaceAllocationRequest) returns (SpaceallocationResponse){}
    rpc DeleteSpace(DeleteSpaceRequest) returns (DeleteSpaceResponse){}
}
